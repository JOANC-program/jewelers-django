# Generated by Django 5.2.5 on 2025-08-29 19:24

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CRUD', '0003_initial'),
    ]

def crearRol(apps, schema_editor):
    Rol = apps.get_model("CRUD", "Rol")
    roles_iniciales = [
        {"nombreRol": "Administrador", "descripcionRol": "Acceso completo al sistema"},
        {
            "nombreRol": "Empleado",
            "descripcionRol": "Acceso limitado a funciones de empleado",
        },
    ]
    for rol_data in roles_iniciales:
        Rol.objects.create(**rol_data)


def crearEstado(apps, schema_editor):
    Estado = apps.get_model("CRUD", "Estado")
    estados_iniciales = [
        {"estado": "Activo"},
        {"estado": "Inactivo"},
        {"estado": "Eliminado"},
    ]
    for estado_data in estados_iniciales:
        Estado.objects.create(**estado_data)


def crearEstadoCivil(apps, schema_editor):
    EstadoCivil = apps.get_model("CRUD", "EstadoCivil")
    estados_civiles_iniciales = [
        {"estadoCivil": "Soltero"},
        {"estadoCivil": "Casado"},
        {"estadoCivil": "Divorciado"},
        {"estadoCivil": "Viudo"},
    ]
    for estado_civil_data in estados_civiles_iniciales:
        EstadoCivil.objects.create(**estado_civil_data)


def crearEstadoCredito(apps, schema_editor):
    EstadoCredito = apps.get_model("CRUD", "EstadoCredito")
    estados_credito_iniciales = [
        {"estadoCredito": "Pago"},
        {"estadoCredito": "Pendiente"},
        {"estadoCredito": "En mora"},
        {"estadoCredito": "Vencido"},
        {"estadoCredito": "Cancelado"},
    ]
    for estado_credito_data in estados_credito_iniciales:
        EstadoCredito.object.create(**estado_credito_data)


def crearEstadoEmpleado(apps, schema_editor):
    EstadoEmpleado = apps.get_model("CRUD", "EstadoEmpleado")
    estados_empleado_iniciales = [
        {"estadoEmpleado": "Activo"},
        {"estadoEmpleado": "Inactivo"},
        {"estadoEmpleado": "En prueba"},
        {"estadoEmpleado": "Suspendido"},
        {"estadoEmpleado": "Retirado"},
    ]
    for estado_empleado_data in estados_empleado_iniciales:
        EstadoEmpleado.objects.create(**estado_empleado_data)


def crearEstadoProducto(apps, schema_editor):
    EstadoProducto = apps.get_model("CRUD", "EstadoProducto")
    estados_producto_iniciales = [
        {"estadoProducto": "Disponible"},
        {"estadoProducto": "En pedido"},
        {"estadoProducto": "Reservado"},
        {"estadoProducto": "Devuelto"},
        {"estadoProducto": "Agotado"},
        {"estadoProducto": "Descontinuado"},
        {"estadoProducto": "Eliminado"},
    ]
    for estado_producto_data in estados_producto_iniciales:
        EstadoProducto.objects.create(**estado_producto_data)


def crearEstadoVenta(apps, schema_editor):
    EstadoVenta = apps.get_model("CRUD", "EstadoVenta")
    estados_venta_iniciales = [
        {"estadoVenta": "Pendiente"},
        {"estadoVenta": "Completada"},
        {"estadoVenta": "Cancelada"},
        {"estadoVenta": "En proceso"},
        {"estadoVenta": "Reembolsada"},
    ]
    for estado_venta_data in estados_venta_iniciales:
        EstadoVenta.objects.create(**estado_venta_data)


def crearGenero(apps, schema_editor):
    Genero = apps.get_model("CRUD", "Genero")
    generos_iniciales = [
        {"genero": "Masculino"},
        {"genero": "Femenino"},
        {"genero": "Otro"},
        {"genero": "Prefiero no decirlo"},
    ]
    for genero_data in generos_iniciales:
        Genero.objects.create(**genero_data)


def crearJornadaLaboral(apps, schema_editor):
    JornadaLaboral = apps.get_model("CRUD", "JornadaLaboral")
    jornadas_laborales_iniciales = [
        {"jornadaLaboral": "Tiempo completo"},
        {"jornadaLaboral": "Medio tiempo"},
        {"jornadaLaboral": "Turno nocturno"},
        {"jornadaLaboral": "Turno diurno"},
        {"jornadaLaboral": "Turno rotativo"},
    ]
    for jornada_laboral_data in jornadas_laborales_iniciales:
        JornadaLaboral.objects.create(**jornada_laboral_data)


def crearMetodoPago(apps, schema_editor):
    MetodoPago = apps.get_model("CRUD", "MetodoPago")
    metodos_pago_iniciales = [
        {"metodoPago": "Efectivo"},
        {"metodoPago": "Tarjeta de crédito"},
        {"metodoPago": "Tarjeta de débito"},
        {"metodoPago": "Transferencia bancaria"},
        {"metodoPago": "PayPal"},
        {"metodoPago": "Nequi"},
        {"metodoPago": "Daviplata"},
        {"metodoPago": "Otro"},
    ]
    for metodo_pago_data in metodos_pago_iniciales:
        MetodoPago.objects.create(**metodo_pago_data)


def crearNacionalidad(apps, schema_editor):
    Nacionalidad = apps.get_model("CRUD", "Nacionalidad")
    nacionalidades_iniciales = [
        {"nacionalidad": "Colombiano"},
        {"nacionalidad": "Venezolano"},
        {"nacionalidad": "Ecuatoriano"},
        {"nacionalidad": "Peruano"},
        {"nacionalidad": "Chileno"},
        {"nacionalidad": "Otro"},
    ]
    for nacionalidad_data in nacionalidades_iniciales:
        Nacionalidad.objects.create(**nacionalidad_data)


def crearTipoContrato(apps, schema_editor):
    TipoContrato = apps.get_model("CRUD", "TipoContrato")
    tipos_contrato_iniciales = [
        {"tipoContrato": "Indefinido"},
        {"tipoContrato": "Temporal"},
        {"tipoContrato": "Por obra o labor"},
        {"tipoContrato": "Aprendizaje"},
        {"tipoContrato": "Prácticas"},
        {"tipoContrato": "Otro"},
    ]
    for tipo_contrato_data in tipos_contrato_iniciales:
        TipoContrato.objects.create(**tipo_contrato_data)


def crearTipoDocumento(apps, schema_editor):
    TipoDocumento = apps.get_model("CRUD", "TipoDocumento")
    tipos_documento_iniciales = [
        {"tipoDocumento": "Cédula de ciudadanía"},
        {"tipoDocumento": "Tarjeta de identidad"},
        {"tipoDocumento": "Cédula de extranjería"},
        {"tipoDocumento": "Pasaporte"},
        {"tipoDocumento": "NIT"},
        {"tipoDocumento": "Otro"},
    ]
    for tipo_documento_data in tipos_documento_iniciales:
        TipoDocumento.objects.create(**tipo_documento_data)


def crearTipoMovimiento(apps, schema_editor):
    TipoMovimiento = apps.get_model("CRUD", "TipoMovimiento")
    tipos_movimiento_iniciales = [
        {"tipoMovimiento": "Entrada"},
        {"tipoMovimiento": "Salida"},
        {"tipoMovimiento": "Ajuste"},
        {"tipoMovimiento": "Transferencia"},
        {"tipoMovimiento": "Devolución"},
        {"tipoMovimiento": "Perdida"},
        {"tipoMovimiento": "Otro"},
    ]
    for tipo_movimiento_data in tipos_movimiento_iniciales:
        TipoMovimiento.objects.create(**tipo_movimiento_data)


def crearTipoPersona(apps, schema_editor):
    TipoPersona = apps.get_model("CRUD", "TipoPersona")
    tipos_persona_iniciales = [
        {"tipoPersona": "Natural"},
        {"tipoPersona": "Jurídica"},
    ]
    for tipo_persona_data in tipos_persona_iniciales:
        TipoPersona.objects.create(**tipo_persona_data)

    operations = [
        migrations.AlterField(
            model_name='empleado',
            name='fotoEmpleado',
            field=models.ImageField(blank=True, null=True, upload_to='uploads/fotos_empleados/'),
        ),
        migrations.AlterField(
            model_name='producto',
            name='fotoProducto',
            field=models.ImageField(blank=True, null=True, upload_to='uploads/fotos_productos/'),
        ),
        migrations.RunPython(crearRol),
        migrations.RunPython(crearEstado),
        migrations.RunPython(crearEstadoCivil),
        migrations.RunPython(crearEstadoCredito),
        migrations.RunPython(crearEstadoEmpleado),
        migrations.RunPython(crearEstadoProducto),
        migrations.RunPython(crearEstadoVenta),
        migrations.RunPython(crearGenero),
        migrations.RunPython(crearJornadaLaboral),
        migrations.RunPython(crearMetodoPago),
        migrations.RunPython(crearNacionalidad),
        migrations.RunPython(crearTipoContrato),
        migrations.RunPython(crearTipoDocumento),
        migrations.RunPython(crearTipoMovimiento),
        migrations.RunPython(crearTipoPersona),
    ]
